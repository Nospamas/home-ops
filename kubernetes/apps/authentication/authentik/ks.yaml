# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/kustomize.toolkit.fluxcd.io/kustomization_v1.json
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: &app authentik-databases
  namespace: &namespace authentication
spec:
  interval: 1h
  path: ./kubernetes/apps/authentication/authentik/cluster
  prune: true
  sourceRef:
    kind: GitRepository
    name: flux-system
    namespace: flux-system
  targetNamespace: *namespace
  dependsOn:
    - name: dragonfly
      namespace: database
    - name: cnpg-crds
      namespace: database
    - name: openebs
      namespace: storage
  postBuild:
    substitute:
      APP: authentik
      DRAGONFLY_REQUESTS_MEMORY: 256Mi
      # renovate: datasource=docker depName=ghcr.io/cloudnative-pg/postgresql
      CNPG_VERSION: 17.4-bookworm
  components:
    # nobackup for init with no prior backups...
    # - ../../../../components/cnpg/nobackup
    - ../../../../components/cnpg/backup
    - ../../../../components/dragonfly
  healthChecks:
    - apiVersion: &dragonflyVersion dragonflydb.io/v1alpha1
      kind: &dragonflyKind Dragonfly
      name: dragonfly-authentik
      namespace: *namespace
    - apiVersion: &postgresVersion postgresql.cnpg.io/v1
      kind: &postgresKind Cluster
      name: postgres-authentik
      namespace: *namespace
  healthCheckExprs:
    - apiVersion: *dragonflyVersion
      kind: *dragonflyKind
      failed: status.phase != 'ready' && status.phase != 'Ready'
      current: status.phase == 'ready' || status.phase == 'Ready'
    - apiVersion: *postgresVersion
      kind: *postgresKind
      failed: status.conditions.filter(e, e.type == 'Ready').all(e, e.status == 'False')
      current: status.conditions.filter(e, e.type == 'Ready').all(e, e.status == 'True')
  timeout: 5m
  decryption:
    provider: sops
    secretRef:
      name: sops-age
  patches:
    - target:
        kind: Cluster
      patch: |
        apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          name: postgres-${APP}
        spec:
          bootstrap:
            initdb:
              database: authentik
              owner: authentik-postgres
              secret:
                name: authentik-db
          managed:
            roles:
            - name: authentik-postgres
              ensure: present
              passwordSecret:
                name: authentik-db
              login: true
              superuser: true
          # bootstrap:
          #   recovery:
          #     recoveryTarget:
          #       targetTime: "2025-05-23 19:00:00.000000-05:00"
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/kustomize.toolkit.fluxcd.io/kustomization_v1.json
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: &app authentik
  namespace: &namespace authentication
spec:
  interval: 1h
  path: ./kubernetes/apps/authentication/authentik/app
  prune: true
  sourceRef:
    kind: GitRepository
    name: flux-system
    namespace: flux-system
  targetNamespace: *namespace
  dependsOn:
    - name: authentik-databases
      namespace: *namespace
    - name: openebs
      namespace: storage
  decryption:
    provider: sops
    secretRef:
      name: sops-age
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/kustomize.toolkit.fluxcd.io/kustomization_v1.json
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: &app authentik-references
  namespace: &namespace authentication
spec:
  interval: 1h
  path: ./kubernetes/apps/authentication/authentik/references
  prune: true
  sourceRef:
    kind: GitRepository
    name: flux-system
    namespace: flux-system
  targetNamespace: *namespace
  postBuild:
    substitute:
      AUTH_SVC: ak-outpost-authentik-embedded-outpost